#!/usr/bin/env bash

# bsed's Functions and Variables

# Vars
__cwd="$(pwd)"
prgroot="$HOME/.bsed"

# Preset associative values
if [[ "${BASHVERSINFO[0]}" -ge 4 ]]; then
	# Declare associative arrays
	declare -A lists
	declare -A states
	lists[cmds]="^(format|config|verbose|help|version)$"
	states[cfg]="" # Any text within a bool state signifies true, less is better
else
	cmds="^(format|config|verbose|help|version)$"
	format=""
	out="nb"
fi

# Variables to be interpolated into the built regex
xwildchar='[\^\.]\*'
xwilddigit='[[:digit:]]\*'
xwhitespace='[[:space:]]\*'

# Output functions
error() { printf '\e[0;1;31m[ERROR]\e[0;0;0m '"$1\n" >&2; }
verbose() { [[ -n "$VERBOSE" ]] && printf '\e[0;1;35m[VERBOSE]\e[0;0;0m '$"$1\n"; }
log() { printf '\e[0;1;32m[BSED]\e[0;0;0m '"$1\n"; }

# Processing functions
__args() {
	# Process args
	[[ -z "$1" ]] && cat "$prgroot"/help | head -1 && exit
	1="$(echo "$1" | tr '[:upper:]' '[:lower:]')" 2>/dev/null
	while [[ -n "$1" ]]; do
		case "${1}" in
			-f | --format )
				shift
				[[ -z "$1" ]] && echo "No format specified" && exit
				if [[ "${BASHVERSINFO[0]}" -ge 4 ]]; then
					states[format]="${1}"
				else
					format="${1}"
				fi
				;;
			-o | --output )
				shift
				if [[ "${BASHVERSINFO[0]}" -ge 4 ]]; then
					[[ -z "$1" ]] && states[out]="nb" || states[out]="${1}";
				else
					[[ -z "$1" ]] && out="nb" || out="${1}";
				fi
				;;
			--verbose | -V )
				VERBOSE=true
				;;
			-\? | --help )
				# Not using -h to leave it open for other possible args
				cat "$prgroot/help"
				exit;;
			--version | -v )
				cat "$prgroot/version"
				exit;;
			* )
				# Catch-all
				if [[ "$1" =~ $([[ "${BASHVERSINFO[0]}" -ge 4 ]] && echo ${lists[cmds]} || echo $cmds) ]]; then
					__cmds "$1"
					return 0
				else
					cat "$prgroot/help" | head -1
					error "'$1' is not an argument!"
					exit
				fi
				;;
		esac
	shift; done
}

__cmds() {
	# Process commands
	[[ -z "$1" ]] && cat "$prgroot"/help | head -1 && exit
	1="$(echo "$1" | tr '[:upper:]' '[:lower:]')" 2>/dev/null
	while [[ -n "$1" ]]; do
		case "${1}" in
			format )
				shift
				[[ -z "$1" ]] && echo "No format specified" && exit
				if [[ "${BASHVERSINFO[0]}" -ge 4 ]]; then
					states[format]="${1}"
				else
					format="${1}"
				fi
				;;
			output )
				shift
				if [[ "${BASHVERSINFO[0]}" -ge 4 ]]; then
					[[ -z "$1" ]] && states[out]="nb" || states[out]="${1}";
				else
					[[ -z "$1" ]] && out="nb" || out="${1}";
				fi
				;;
			verbose )
				shift
				VERBOSE=true
				;;
			help )
				cat "$prgroot/help"
				exit
				;;
			version )
				cat "$prgroot/version"
				exit;;
			* )
				# Catch-all
				if [[ "$1" =~ ^- ]]; then
					__args "$1"
					return 0
				else
					verbose "Grepped command: '$([[ "${BASHVERSINFO[0]}" -ge 4 ]] && { echo "${lists[cmds]}" | sed -e 's/\^\|[\(]\|[\)]\|\$//g' -e 's/[\|]/\n/g' | grep "$1"; } || { echo "$cmds" | sed -e 's/\^\|[\(]\|[\)]\|\$//g' -e 's/[\|]/\n/g' | grep "$1"; })'"
					error "'$1' is not a command!"
					error "Did you mean to use '$([[ "${BASHVERSINFO[0]}" -ge 4 ]] && { echo "${lists[cmds]}" | sed -e 's/\^\|[\(]\|[\)]\|\$//g' -e 's/[\|]/\n/g' | grep "$1"; } || { echo "$cmds" | sed -e 's/\^\|[\(]\|[\)]\|\$//g' -e 's/[\|]/\n/g' | grep "$1"; })'?"
					exit
				fi
				;;
		esac
	shift; done
}

__proc() {
	[[ -z "$([[ "${BASHVERSINFO[0]}" -ge 4 ]] && echo "${states[format]}" || echo "$format")" ]] && error "No format specified!" && exit
	# Process the format
	local built_regex="$([[ "${BASHVERSINFO[0]}" -ge 4 ]] && echo "${states[format]}" || echo "$format")"
	local escs='';
	# '#' is used as a placeholder
	# Process escaped characters
	[[ "$built_regex" =~ '\' ]] && {
		verbose "Escaping "'\'"* and "'\'"%...";
		escs=true;
		built_regex="$(echo "$built_regex" | \
			sed -e 's/\(\\\\\*\)/!/g' \
					-e 's/\(\\\*\)/\&/g' \
					-e 's/\(\\\\%\)/@/g' \
					-e 's/\(\\%\)/@/g' \
					
		)";
		verbose "Current regex transformation: "$built_regex;
	}

	# Process regex quantifiers for use in regex
	[[ "$built_regex" =~ (\+|\?) ]] && {
		verbose "Unescaping regex quantifiers...";
		built_regex="$(echo "$built_regex" | \
			sed -e 's/\(\\+\)/\</g' \
					-e 's/\(+\)/\\+/g' \
					-e 's/\(<\)/+/g' \
					-e 's/\(\\?\)/\>/g' \
					-e 's/\(?\)/\\?/g' \
					-e 's/\(>\)/?/g' \
		)"
		verbose "Current regex transformation: "$built_regex;
	}

	# Next wildchars
	[[ "$built_regex" =~ (\**) ]] && {
		verbose "Transforming wildcard characters...";
		built_regex="$(echo "$built_regex" | \
			sed -e 's/\./\\./g' \
					-e 's/\(\*\*\)/#/g' \
					-e 's/\(\*\)/\./g' \
					-e 's/#/'"$xwildchar"'/g' \
		)";
		verbose "Current regex transformation: "$built_regex;
	}
	
	# Next wilddigits
	[[ "$built_regex" =~ (%*) ]] && {
		verbose "Transforming digits...";
		built_regex="$(echo "$built_regex" | \
			sed -e 's/\(%%\)/#/g' \
					-e 's/\(%\)/[0-9]/g' \
					-e 's/#/'"$xwilddigit"'/g' \
		)";
		verbose "Current regex transformation: "$built_regex;
	}

	# Next whitespace
	[[ "$built_regex" =~ ( *) ]] && {
		verbose "Transforming spaces...";
		built_regex="$(echo "$built_regex" | \
			sed -e 's/ \+/'"$xwhitespace"'/g' \
					-e 's/\( \)/'"[[:space:]]"'/g' \
		)";
		verbose "Current regex transformation: "$built_regex;
	}

	# Lastly turn special characters back into their literals/regex equiv
	[[ -n "$escs" ]] && {
		verbose "Fix the placeholders for "'\'"* and "'\'"% to their character literals...";
		verbose "Replace regex quantifier placeholder for * ...";
		built_regex="$(echo "$built_regex" | \
			sed -e 's/\(!\)/\\*/g' \
					-e 's/\(@\)/%/g' \
					-e 's/\(&\)/*/g' \
		)";
		verbose "Current regex transformation: "$built_regex;
	}

	# Run an output check to transform characters for use in a sed expression
	[[ "$([[ "${BASHVERSINFO[0]}" -ge 4 ]] && echo "${states[out]}" || echo "$out")" == 'b' ]] && {
		verbose "Transforming characters for use in bash...";
		built_regex="$(echo "$built_regex" | \
			sed -e 's/\&/\\&/g' \
					-e 's/\\+/+/g' \
					-e 's/+/\\+/g' \
					-e 's/?/\\?/g' \
					-e 's/\\?/?/g' \
					-e 's/\$/\\$/g' \
					-e 's/\\\$/\\\\\\$/g' \
			)"
	}

	# Echo out resulting regex
	verbose "Built regex: "$built_regex;
	echo "$built_regex"
}
